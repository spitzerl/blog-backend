#!/bin/bash

# Script de gestion Docker pour le blog-backend
# Usage: ./scripts/docker-local.sh [start|stop|restart|logs|clean|test]

COMPOSE_FILE="docker-compose.dev.yml"
PROJECT_NAME="blog-backend-local"

show_usage() {
    echo "üê≥ Script de gestion Docker pour Blog Backend"
    echo "============================================"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commandes disponibles:"
    echo "  start     - D√©marrer l'environnement complet"
    echo "  stop      - Arr√™ter tous les services"
    echo "  restart   - Red√©marrer l'environnement"
    echo "  logs      - Afficher les logs en temps r√©el"
    echo "  logs-app  - Afficher uniquement les logs de l'app"
    echo "  logs-db   - Afficher uniquement les logs de la DB"
    echo "  clean     - Nettoyer (arr√™ter + supprimer volumes)"
    echo "  reset     - Reset complet (clean + rebuild)"
    echo "  test      - Tester l'application"
    echo "  status    - Voir l'√©tat des services"
    echo "  shell     - Acc√©der au shell du backend"
    echo "  db-shell  - Acc√©der au shell PostgreSQL"
    echo ""
    echo "Exemples:"
    echo "  $0 start                    # D√©marrer l'environnement"
    echo "  $0 logs-app                 # Voir les logs de l'app"
    echo "  $0 test                     # Tester l'API"
    echo ""
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n'est pas install√©"
        exit 1
    fi
    
    if ! docker compose version &> /dev/null; then
        echo "‚ùå Docker Compose n'est pas disponible"
        exit 1
    fi
}

start_services() {
    echo "üöÄ D√©marrage de l'environnement Docker local..."
    echo "================================================"
    
    # Cr√©er les dossiers n√©cessaires
    mkdir -p uploads logs
    
    # D√©marrer les services
    docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" up -d --build
    
    echo ""
    echo "‚è≥ Attente du d√©marrage des services..."
    sleep 10
    
    echo ""
    echo "üìä √âtat des services:"
    docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" ps
    
    echo ""
    echo "üéâ Environnement d√©marr√© !"
    echo "üìñ Services disponibles:"
    echo "   üåê Backend API: http://localhost:3001"
    echo "   üîç Health check: http://localhost:3001/health"
    echo "   üìö API Posts: http://localhost:3001/api/posts"
    echo "   üóÑÔ∏è  Adminer DB: http://localhost:8080"
    echo ""
    echo "üìã Commandes utiles:"
    echo "   $0 logs       # Voir tous les logs"
    echo "   $0 test       # Tester l'API"
    echo "   $0 stop       # Arr√™ter les services"
}

stop_services() {
    echo "üõë Arr√™t des services..."
    docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" down
    echo "‚úÖ Services arr√™t√©s"
}

restart_services() {
    echo "üîÑ Red√©marrage des services..."
    stop_services
    echo ""
    start_services
}

show_logs() {
    echo "üìã Affichage des logs (Ctrl+C pour quitter)..."
    docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" logs -f
}

show_app_logs() {
    echo "üìã Logs de l'application (Ctrl+C pour quitter)..."
    docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" logs -f backend
}

show_db_logs() {
    echo "üìã Logs de la base de donn√©es (Ctrl+C pour quitter)..."
    docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" logs -f postgres
}

clean_environment() {
    echo "üßπ Nettoyage de l'environnement..."
    docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" down -v --remove-orphans
    echo "‚úÖ Environnement nettoy√©"
}

reset_environment() {
    echo "üîÑ Reset complet de l'environnement..."
    clean_environment
    echo ""
    echo "üßπ Suppression des images..."
    docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" down --rmi all 2>/dev/null || true
    echo ""
    start_services
}

test_application() {
    echo "üß™ Test de l'application..."
    
    # V√©rifier que l'app est d√©marr√©e
    if ! docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" ps | grep -q "blog-backend.*Up"; then
        echo "‚ùå L'application n'est pas d√©marr√©e. Lancez: $0 start"
        exit 1
    fi
    
    # Ex√©cuter les tests
    if [ -f "scripts/test-deployment.sh" ]; then
        ./scripts/test-deployment.sh http://localhost:3001
    else
        echo "‚ö†Ô∏è Script de test non trouv√©, test basique..."
        curl -s http://localhost:3001/health | jq . || curl -s http://localhost:3001/health
    fi
}

show_status() {
    echo "üìä √âtat des services Docker:"
    docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" ps
    
    echo ""
    echo "üîç V√©rification des ports:"
    echo "Port 3001 (Backend): $(ss -tlnp | grep :3001 && echo "‚úÖ Occup√©" || echo "‚ùå Libre")"
    echo "Port 5432 (PostgreSQL): $(ss -tlnp | grep :5432 && echo "‚úÖ Occup√©" || echo "‚ùå Libre")"
    echo "Port 8080 (Adminer): $(ss -tlnp | grep :8080 && echo "‚úÖ Occup√©" || echo "‚ùå Libre")"
}

backend_shell() {
    echo "üêö Acc√®s au shell du backend..."
    docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" exec backend sh
}

db_shell() {
    echo "üóÑÔ∏è Acc√®s au shell PostgreSQL..."
    docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" exec postgres psql -U bloguser -d blogdb
}

# Main script
check_docker

case "${1:-}" in
    start)
        start_services
        ;;
    stop)
        stop_services
        ;;
    restart)
        restart_services
        ;;
    logs)
        show_logs
        ;;
    logs-app)
        show_app_logs
        ;;
    logs-db)
        show_db_logs
        ;;
    clean)
        clean_environment
        ;;
    reset)
        reset_environment
        ;;
    test)
        test_application
        ;;
    status)
        show_status
        ;;
    shell)
        backend_shell
        ;;
    db-shell)
        db_shell
        ;;
    *)
        show_usage
        exit 1
        ;;
esac